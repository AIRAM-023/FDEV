/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { Event } from 'vs/base/common/event';
import { IMergeEditorOptions } from 'vs/editor/common/config/editorOptions';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { IMergeComputationResult } from 'vs/editor/common/merge/mergeComputer';
import { ILineChange } from 'vs/editor/common/diff/diffComputer';
import { IDimension } from 'vs/editor/common/core/dimension';
import { ICodeEditor } from 'vs/editor/browser/editorBrowser';


export interface IMergeEditorConstructionOptions extends IMergeEditorOptions {
	/**
	 * The initial editor dimension (to avoid measuring the container).
	 */
	dimension?: IDimension;

	/**
	 * Place overflow widgets inside an external DOM node.
	 * Defaults to an internal DOM node.
	 */
	overflowWidgetsDomNode?: HTMLElement;

	/**
	 * Aria label for current branch editor.
	 */
	currentAriaLabel?: string;

	/**
	 * Aria label for output editor.
	 */
	outputAriaLabel?: string;

	/**
	 * Aria label for incoming branch editor.
	 */
	incomingAriaLabel?: string;

	/**
	 * Is the merge editor inside another editor
	 * Defaults to false
	 */
	isInEmbeddedEditor?: boolean;
}

/**
 * @vscode-internal
 */
export const enum MergeEditorState {
	Idle,
	ComputingDiff,
	DiffComputed,
}

/**
 * A rich merge editor.
 *
 */
export interface IMergeEditor extends editorCommon.IEditor {
	/**
	 * Returns whether the merge editor is ignoring trim whitespace or not.
	 * @vscode-internal
	 */
	readonly ignoreTrimWhitespace: boolean;
	/**
	 * Timeout in milliseconds after which merge computation is cancelled.
	 * @vscode-internal
	 */
	readonly maxComputationTime: number;

	/**
	 * @see {@link ICodeEditor.getDomNode}
	 */
	getDomNode(): HTMLElement;

	/**
	 * An event emitted when the diff information computed by this merge editor has been updated.
	 * @event
	 */
	readonly onDidUpdateDiff: Event<void>;

	/**
	 * Saves current view state of the editor in a serializable object.
	 */
	saveViewState(): editorCommon.IMergeEditorViewState | null;

	/**
	 * Restores the view state of the editor from a serializable object generated by `saveViewState`.
	 */
	restoreViewState(state: editorCommon.IMergeEditorViewState): void;

	/**
	 * Gets the current model attached to this editor.
	 */
	getModel(): editorCommon.IMergeEditorModel | null;

	/**
	 * Sets the current model attached to this editor.
	 * If the previous model was created by the editor via the value key in the options
	 * literal object, it will be destroyed. Otherwise, if the previous model was set
	 * via setModel, or the model key in the options literal object, the previous model
	 * will not be destroyed.
	 * It is safe to call setModel(null) to simply detach the current model from the editor.
	 */
	setModel(model: editorCommon.IMergeEditorModel | null): void;

	/**
	 * Get the `current branch` editor.
	 */
	getCurrentEditor(): ICodeEditor;

	/**
	 * Get the `output` editor.
	 */
	getOutputEditor(): ICodeEditor;

	/**
	 * Get the `incoming branch` editor.
	 */
	getIncomingEditor(): ICodeEditor;

	/**
	 * Get the line changes from the current branch.
	 */
	getCurrentLineChanges(): ILineChange[] | null;

	/**
	 * Get the line changes from the output editor.
	 */
	getOutputLineChanges(): ILineChange[] | null;

	/**
	 * Get the line changes from the incoming branch.
	 */
	getIncomingLineChanges(): ILineChange[] | null;

	/**
	 * Get the computed merge information.
	 * @vscode-internal
	 */
	getMergeComputationResult(): IMergeComputationResult | null;

	// TODO: consider adding `getDiffLineInformationFor*` APIs

	/**
	 * Update the editor's options after the editor has been created.
	 */
	updateOptions(newOptions: IMergeEditorOptions): void;

	/**
	 * Update merge editor banner.
	 */
	updateBanner(currentBanner: HTMLElement, outputBanner: HTMLElement, incomingBanner: HTMLElement, height: number): void;
}

/**
 * @vscode-internal
 */
export function isMergeEditor(thing: unknown): thing is IMergeEditor {
	if (thing && typeof (<IMergeEditor>thing).getEditorType === 'function') {
		return (<IMergeEditor>thing).getEditorType() === editorCommon.EditorType.IMergeEditor;
	} else {
		return false;
	}
}
