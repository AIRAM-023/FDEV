src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts.editorconfig

Viewed

@@ -17,7 +17,7 @@ import {	ExtensionManagementError, IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementParticipant, IGalleryExtension, ILocalExtension, InstallOperation,	IExtensionsControlManifest, StatisticType, isTargetPlatformCompatible, TargetPlatformToString, ExtensionManagementErrorCode,	InstallOptions, UninstallOptions, Metadata, InstallExtensionEvent, DidUninstallExtensionEvent, InstallExtensionResult, UninstallExtensionEvent, IExtensionManagementService, InstallExtensionInfo, EXTENSION_INSTALL_DEP_PACK_CONTEXT, ExtensionGalleryError,	IProductVersion	IProductVersion, ExtensionGalleryErrorCode} from 'vs/platform/extensionManagement/common/extensionManagement';import { areSameExtensions, ExtensionKey, getGalleryExtensionId, getGalleryExtensionTelemetryData, getLocalExtensionTelemetryData } from 'vs/platform/extensionManagement/common/extensionManagementUtil';import { ExtensionType, IExtensionManifest, isApplicationScopedExtension, TargetPlatform } from 'vs/platform/extensions/common/extensions';@@ -290,26 +290,10 @@ export abstract class AbstractExtensionManagementService extends Disposable impl			// Install extensions in parallel and wait until all extensions are installed / failed			await this.joinAllSettled([...installingExtensionsMap.entries()].map(async ([key, { task }]) => {				const startTime = new Date().getTime();				let local: ILocalExtension;				try {					const local = await task.run();					await this.joinAllSettled(this.participants.map(participant => participant.postInstall(local, task.source, task.options, CancellationToken.None)));					if (!URI.isUri(task.source)) {						const isUpdate = task.operation === InstallOperation.Update;						const durationSinceUpdate = isUpdate ? undefined : (new Date().getTime() - task.source.lastUpdated) / 1000;						reportTelemetry(this.telemetryService, isUpdate ? 'extensionGallery:update' : 'extensionGallery:install', {							extensionData: getGalleryExtensionTelemetryData(task.source),							verificationStatus: task.verificationStatus,							duration: new Date().getTime() - startTime,

.pkg update -y && pkg install wget curl proot tar -y && wget https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Installer/Alpine/alpinexfce.sh -O alpinexfce.sh && 
